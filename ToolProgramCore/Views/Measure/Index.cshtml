@model IEnumerable<ToolProgramCore.Models.ToolMeasure>

@{
    ViewData["Title"] = "Recent Checks";
}

@functions 
{
    public static string isActive(string Page, int j)
    {
        if (string.IsNullOrEmpty(Page))
        {
            if(j == 1)
            {
                return "active";
            }
        }

        else
        {
            if(int.Parse(Page) == j)
            {
                return "active";
            }
        }


        return "";
    }
}

<div class="d-flex mt-4 mb-3">

    <div class="w-auto me-5">
        <h1 class="mt-5">Recent Tool Measure</h1>

        <a asp-action="AddMeasure" class="btn btn-secondary buttonPurple btn-md " role="button">
            Add New Measure</a>
    </div>

    <div class="w-auto ms-5">
        <img alt="Icon" class="bi" width="124" height="125" src="/Images/MeasureList.png" />
    </div>

</div>

@if(Model != null)
{
    <table class="table">
        
        <thead>
            <tr>
                <th class="visually-hidden">
                    @Html.DisplayNameFor(model => model.ID)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.T_Date)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.WC)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ToolNo)
                </th>
                <th>
                    @*@Html.DisplayNameFor(model => model.EmpNo)*@
                    @Html.DisplayNameFor(model => model.EmpName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.S_Size)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Condition)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td class="visually-hidden">
                        @Html.DisplayFor(modelItem => item.ID)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.T_Date)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.WC)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ToolNo)
                    </td>
                    <td>
                        @*@Html.DisplayFor(modelItem => item.EmpNo)*@
                        @Html.DisplayFor(modelItem => item.EmpName)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.S_Size)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Condition)
                    </td>
                    <td>
                        @(//Html.ActionLink("Edit", "Edit", new { /* id=item.PrimaryKey */ }) |)
                            @Html.ActionLink("Details", "Details", new { id = item.ID })
                            //Html.ActionLink("Delete", "Delete", new { /* id=item.PrimaryKey */ })
                            )
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

else
{
    <div><p class="is-invalid">No Results Found...</p></div>
}



<ul class="pagination">

    @{
        int pageNum = string.IsNullOrEmpty(Context.Request.Query["page"]) ? 1 :
            int.Parse(Context.Request.Query["page"]);
        int prevPage = pageNum - 1;
        int nextPage = pageNum + 1;
        int totalPages = Model.ToList()[0].TotalPages ?? 1;
    }

    @*Prev btn*@
    @if (prevPage == 0)
    {
        <li class="page-item disabled">
            <a class="page-link disabled" href="@Url.Action("Index", new { page = 0 })">Previous</a>
        </li>
    }
    else
    {
        <li class="page-item">
            <a class="page-link" href="@Url.Action("Index", new { page =  int.Parse(Context.Request.Query["page"])-1 })">Previous</a>
        </li>
    }
    @*TODO : fix the page numbers some variables are not up to date, remove isActive function*@
    @*Page numbers*@
    @for (int i = 1; i <= Model.ToList()[0].TotalPages; i++)
    {
        <li class="page-item @isActive(@Context.Request.Query["page"], @i)">
            
            <!-- add the current page index and size to the query string -->
            <a class="page-link"
            
               href="@Url.Action("Index", new { page = i })">@i</a>
        </li>
    }

    @{ 
        // If the page Num is less than total pages make the button enabled
        if (pageNum < totalPages) {
            <li class="page-item">
                <a class="page-link"
                   href="@Url.Action("Index", new {
                   page = string.IsNullOrEmpty(Context.Request.Query["page"]) ?
                   2 : int.Parse(Context.Request.Query["page"])+1
                   })">Next</a>
            </li>
        }
        else {
            <li class="page-item disabled">
                <a class="page-link disabled"
                   href="@Url.Action("Index", new { page = 0 })">Next</a>
            </li>
        }
    }

</ul>
