@model IEnumerable<ToolProgramCore.Models.ToolMeasure>

@{
    ViewData["Title"] = "Recent Checks";
}

@functions 
{
    public static string isActive(string Page, int j)
    {
        if (string.IsNullOrEmpty(Page))
        {
            if(j == 1)
            {
                return "active";
            }
        }

        else
        {
            if(int.Parse(Page) == j)
            {
                return "active";
            }
        }


        return "";
    }
}

<div class="d-flex mt-4 mb-3">

    <div class="w-auto me-5">
        <h1 class="mt-5">Recent Tool Measure</h1>

        <div class="w-100 d-flex mb-2 mt-3">
            <a asp-action="AddMeasure" class="btn btn-secondary buttonPurple btn-md me-2 " role="button">Add New Measure</a>
            <a class="btn btn-secondary btn-md " role="button" asp-action="Export">Export All</a>

        </div>
        
            
    </div>

    <div class="w-auto ms-5">
        <img alt="Icon" class="bi" width="124" height="125" src="~/Images/MeasureList.png" />
    </div>

</div>

@if ((Model != null) && (Model.ToList().Count != 0))
{
    <table class="table">
        
        <thead>
            <tr>
                <th class="visually-hidden">
                    @Html.DisplayNameFor(model => model.ID)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.T_Date)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.WC)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.ToolNo)
                </th>
                <th>
                    @*@Html.DisplayNameFor(model => model.EmpNo)*@
                    @Html.DisplayNameFor(model => model.EmpName)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.S_Size)
                </th>
                <th>
                    @Html.DisplayNameFor(model => model.Condition)
                </th>
                <th></th>
            </tr>
        </thead>
        <tbody>
            @foreach (var item in Model)
            {
                <tr>
                    <td class="visually-hidden">
                        @Html.DisplayFor(modelItem => item.ID)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.T_Date)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.WC)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.ToolNo)
                    </td>
                    <td>
                        @*@Html.DisplayFor(modelItem => item.EmpNo)*@
                        @*@Html.DisplayFor(modelItem => item.EmpName)*@
                        @(item.EmpName == null ? "" :
                            item.EmpName.Split(',')[0] + ( item.EmpName.Split(',').Length > 1 ?
                            ", " + item.EmpName.Split(',')[1][1] : ""))
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.S_Size)
                    </td>
                    <td>
                        @Html.DisplayFor(modelItem => item.Condition)
                    </td>
                    <td>
                        @(//Html.ActionLink("Edit", "Edit", new { /* id=item.PrimaryKey */ }) |)
                            @Html.ActionLink("Details", "Details", new { id = item.ID })
                            //Html.ActionLink("Delete", "Delete", new { /* id=item.PrimaryKey */ })
                            )
                    </td>
                </tr>
            }
        </tbody>
    </table>
}

else
{
    <div><p class="is-invalid">No Results Found...</p></div>
}


@if ((Model != null) && (Model.ToList().Count != 0)) {
    <ul class="pagination">

        @{
            int pageNum = string.IsNullOrEmpty(Context.Request.Query["page"]) ? 1 :
                int.Parse(Context.Request.Query["page"]);
            int prevPage = pageNum - 1;
            int nextPage = pageNum + 1;
            int totalPages = Model== null ? 0 : Model.ToList()[0].TotalPages ?? 1;
        }

        @*Prev btn*@
        @if (prevPage == 0)
        {
            <li class="page-item disabled">
                <a class="page-link disabled" href="@Url.Action("Index", new { page = 0 })">Previous</a>
            </li>
        }
        else
        {
            <li class="page-item">
                <a class="page-link" href="@Url.Action("Index", new { page =  int.Parse(Context.Request.Query["page"])-1 })">Previous</a>
            </li>
        }
        @* @*TODO : fix the page numbers some variables are not up to date, remove isActive function*@
        @*Page numbers*@
        @*for (int i = 1; i <= Model.ToList()[0].TotalPages; i++)
        {
            <li class="page-item @isActive(@Context.Request.Query["page"], @i)">
            
                <!-- add the current page index and size to the query string -->
                <a class="page-link" 
            
                   href="@Url.Action("Index", new { page = i })">@i</a>
            </li>
        } *@

        
        <li class="page-item @isActive(@Context.Request.Query["page"], 1)">
            
            <!-- add the current page index and size to the query string -->
            <a class="page-link" 
            
                href="@Url.Action("Index", new { page = 1 })">1</a>
        </li>
        @if (Model.ToList()[0].TotalPages > 1) {
            <li class="page-item @isActive(@Context.Request.Query["page"], 2)">
            
            <!-- add the current page index and size to the query string -->
            <a class="page-link" 
            
                href="@Url.Action("Index", new { page = 2 })">2</a>
            </li>
        }

        @if (Model.ToList()[0].TotalPages > 5) {

            <li class="page-item">
            
            <!-- add the current page index and size to the query string -->
            <a class="page-link" 
            
               Disabled >...</a>
            </li>
            @* If its greater than 2 and 2 less than the max make it be half the page *@
            @if(((Context.Request.Query["page"]).Count > 0) && ( (Model.ToList()[0].TotalPages)-2 > int.Parse(@Context.Request.Query["page"])) && int.Parse(@Context.Request.Query["page"]) > 2)
            {
                <li class="page-item @isActive(@Context.Request.Query["page"], int.Parse(Context.Request.Query["page"]))">
            
                    <!-- add the current page index and size to the query string -->
                    <a class="page-link" 
                       href="@Url.Action("Index", new { page = int.Parse(Context.Request.Query["page"]) })">@(int.Parse(Context.Request.Query["page"]))</a>
                </li>
                <li class="page-item">
            
                <!-- add the current page index and size to the query string -->
                <a class="page-link" 
            
                   Disabled >...</a>
                </li>
            }
            else {

                <li class="page-item @isActive(@Context.Request.Query["page"], (Model.ToList()[0].TotalPages??0)/2)">
            
                    <!-- add the current page index and size to the query string -->
                    <a class="page-link" 
                       href="@Url.Action("Index", new { page = (Model.ToList()[0].TotalPages)/2 })">@((Model.ToList()[0].TotalPages)/2)</a>
                </li>
                <li class="page-item">
            
                <!-- add the current page index and size to the query string -->
                <a class="page-link" 
            
                   Disabled >...</a>
                </li>

            }
             @* The next two are flipped with 3 and 2 because if there is 4 it will show 3 then 4 if it is 3 pages it will show only show 3 *@
            @if (Model.ToList()[0].TotalPages > 3) {
            <li class="page-item @isActive(@Context.Request.Query["page"],(Model.ToList()[0].TotalPages??0)-2)">
            
            <!-- add the current page index and size to the query string -->
            <a class="page-link" 
            
                href="@Url.Action("Index", new { page = (Model.ToList()[0].TotalPages)-2 })">@((Model.ToList()[0].TotalPages)-2)</a>
            </li>
            }

        @if (Model.ToList()[0].TotalPages > 2) {
            <li class="page-item @isActive(@Context.Request.Query["page"],(Model.ToList()[0].TotalPages??0)-1)">
            
            <!-- add the current page index and size to the query string -->
            <a class="page-link" 
            
                href="@Url.Action("Index", new { page = (Model.ToList()[0].TotalPages)-1 })">@((Model.ToList()[0].TotalPages)-1)</a>
            </li>
            }

            


        }
        
        

        

        @{ 
            // If the page Num is less than total pages make the button enabled
            if (pageNum < totalPages) {
                <li class="page-item">
                    <a class="page-link"
                       href="@Url.Action("Index", new {
                       page = string.IsNullOrEmpty(Context.Request.Query["page"]) ?
                       2 : int.Parse(Context.Request.Query["page"])+1
                       })">Next</a>
                </li>
            }
            else {
                <li class="page-item disabled">
                    <a class="page-link disabled"
                       href="@Url.Action("Index", new { page = 0 })">Next</a>
                </li>
            }
        }

    </ul>
}
