@model IEnumerable<ToolProgramCore.Models.ToolMeasure>

@{
    ViewData["Title"] = "Recent Checks";
}


<h1 class="mt-5">Recent Tool Checks</h1>

@*<p >*@
    <a asp-action="AddMeasure"><button>Add New Measure</button></a>
@*</p>*@
<table class="table">
    <thead>
        <tr>
            <th class="visually-hidden">
                @Html.DisplayNameFor(model => model.ID)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.T_Date)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.WC)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ToolNo)
            </th>
            <th>
                @*@Html.DisplayNameFor(model => model.EmpNo)*@
                @Html.DisplayNameFor(model => model.EmpName)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.S_Size)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Condition)
            </th>
            <th></th>
        </tr>
    </thead>
    <tbody>
@foreach (var item in Model) {
        <tr>
            <td class="visually-hidden" >
                @Html.DisplayFor(modelItem => item.ID)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.T_Date)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.WC)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ToolNo)
            </td>
            <td>
                @*@Html.DisplayFor(modelItem => item.EmpNo)*@
                @Html.DisplayFor(modelItem => item.EmpName)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.S_Size)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Condition)
            </td>
            <td>
                @(//Html.ActionLink("Edit", "Edit", new { /* id=item.PrimaryKey */ }) |)
                @Html.ActionLink("Details", "Details", new { id=item.ID })
                //Html.ActionLink("Delete", "Delete", new { /* id=item.PrimaryKey */ })
                )
            </td>
        </tr>
}
    </tbody>
</table>
<p>@Context.Request.Query["page"] Pages</p>

<ul class="pagination">

    @if (string.IsNullOrEmpty(Context.Request.Query["page"]) || @Context.Request.Query["page"] == "1")
    {
        <li class="page-item disabled">
            <a class="page-link disabled" href="@Url.Action("Index", new { page = 0 })">Previous</a>
        </li>
    }

    else
    {
        <li class="page-item">
            <a class="page-link" href="@Url.Action("Index", new { page =  int.Parse(Context.Request.Query["page"])-1 })">Previous</a>
        </li>
    }

    

    
    @for (int i = 1; i <= Model.ToList()[0].TotalPages; i++)
    {
        <li class="page-item">
            
            <!-- add the current page index and size to the query string -->
            <a class="page-link" href="@Url.Action("Index", new { page = i })">@i</a>
        </li>
    }


    @*If the string is empty and there is only one page, or if this is the last page*@
    @if ((string.IsNullOrEmpty(Context.Request.Query["page"]) 
    && Model.ToList()[0].TotalPages < 2) ||
    (
        !(string.IsNullOrEmpty(Context.Request.Query["page"]))
        && int.Parse(Context.Request.Query["page"]) == Model.ToList()[0].TotalPages))

    {
        <li class="page-item disabled">
            <a class="page-link disabled"
            href="@Url.Action("Index", new { page = 0 })">Next</a>
        </li>
    }

    else
    {
        @*Case that it is not only 1 page, and it is not the last page*@
        @*Note if it is null that means we put 2 since the default is page 1*@
        <li class="page-item">
            <a class="page-link" 
            href="@Url.Action("Index", new {
           page = string.IsNullOrEmpty(Context.Request.Query["page"]) ? 
           2 : int.Parse(Context.Request.Query["page"])+1
           })">Next</a>
        </li>
    }
</ul>
